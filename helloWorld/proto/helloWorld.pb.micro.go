// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/helloWorld.proto

package helloWorld

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for HelloWorld service

func NewHelloWorldEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for HelloWorld service

type HelloWorldService interface {
	Login(ctx context.Context, in *UserLoginRequest, opts ...client.CallOption) (*UserResponse, error)
}

type helloWorldService struct {
	c    client.Client
	name string
}

func NewHelloWorldService(name string, c client.Client) HelloWorldService {
	return &helloWorldService{
		c:    c,
		name: name,
	}
}

func (c *helloWorldService) Login(ctx context.Context, in *UserLoginRequest, opts ...client.CallOption) (*UserResponse, error) {
	req := c.c.NewRequest(c.name, "HelloWorld.Login", in)
	out := new(UserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for HelloWorld service

type HelloWorldHandler interface {
	Login(context.Context, *UserLoginRequest, *UserResponse) error
}

func RegisterHelloWorldHandler(s server.Server, hdlr HelloWorldHandler, opts ...server.HandlerOption) error {
	type helloWorld interface {
		Login(ctx context.Context, in *UserLoginRequest, out *UserResponse) error
	}
	type HelloWorld struct {
		helloWorld
	}
	h := &helloWorldHandler{hdlr}
	return s.Handle(s.NewHandler(&HelloWorld{h}, opts...))
}

type helloWorldHandler struct {
	HelloWorldHandler
}

func (h *helloWorldHandler) Login(ctx context.Context, in *UserLoginRequest, out *UserResponse) error {
	return h.HelloWorldHandler.Login(ctx, in, out)
}
